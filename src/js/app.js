'use strict';

var $ = require('jquery');
var React = require('react');
var ReactDOM = require('react-dom');
var marked = require('react-marked');

var CommentBox = React.createClass({
  getInitialState: function() {
    return { data: [] };
  },
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  componentDidMount: function() { // fires only once after component loads
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  handleCommentSubmit: function(comment) {
    console.log('handling comment submit: ', comment);
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({ data: newComments });
  },
  render: function() {
    return (
      <div className="comment-box">
        <h1>Comments</h1>
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
        <CommentList data={this.state.data} />
      </div>
    )
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment){
      return (
        <Comment author={comment.author} avatar={comment.avatar} key={comment.id}>
          {comment.message}
        </Comment>
      )
    });
    return (
      <div className="comment-list">
        {commentNodes}
      </div>
    )
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return { author: '', message: '' };
  },
  handleAuthorChange: function(e) {
    this.setState({ author: e.target.value });
  },
  handleMessageChange: function(e) {
    this.setState({ message: e.target.value });
  },
  handleSubmit: function(e) {
    console.log('submitted');
    e.preventDefault();
    //var author = this.state.author.trim();
    //var text = this.state.text.trim();
    var author = this.state.author;
    var message = this.state.message;
    if (!message || !author) {
      console.log('cant be blank');
      return;
    }
    this.props.onCommentSubmit({ author: author, message: message });
    this.setState({ author: '', message: '' });
  },
  render: function() {
    return (
      <form className="comment-form" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Your comment"
          value={this.state.message}
          onChange={this.handleMessageChange}
        />
        <button type="submit">Post</button>
      </form>
    )
  }
});

var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <div className="avatar"><img src={this.props.avatar} /></div>
        <p>
          <strong>{this.props.author}</strong><br />
          {marked(this.props.children.toString())}
        </p>
      </div>
    )
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments.json" pollInterval={10000} />,
  document.getElementById('comments')
);
